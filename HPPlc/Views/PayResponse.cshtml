@inherits Umbraco.Web.Mvc.UmbracoViewPage

@using System.Configuration;
@using DotNetIntegrationKit;
@using HPPlc.Controllers;
@using System.Threading.Tasks;

@{
	Layout = "masterpage.cshtml";

	var message = Model?.DescendantsOrSelf()?.OfType<PayResponse>()?.SingleOrDefault();
	var culture = Model.GetCultureFromDomains();
	if (!String.IsNullOrWhiteSpace(culture) && culture == "en-US")
	{ culture = ""; }

	//string culture = HPPlc.Models.CultureName.GetCultureName().Replace("/", "");

	bool vResponse = false;
	string strPG_TxnStatus = string.Empty,
			   strPG_ClintTxnRefNo = string.Empty,
			   strPG_TPSLTxnBankCode = string.Empty,
			   strPG_TPSLTxnID = string.Empty,
			   strPG_TxnAmount = string.Empty,
			   strPG_TxnDateTime = string.Empty,
			   strPG_TxnDate = string.Empty,
			   strPG_TxnTime = string.Empty;
	string strPGResponse;
	string[] strSplitDecryptedResponse;
	string payStatus = String.Empty;

	HPPlc.Models.SubscriptionSuccessParam rtnStatus = new HPPlc.Models.SubscriptionSuccessParam();

	try
	{
		string EncryptKey = ConfigurationManager.AppSettings["EncryptKey"].ToString();
		string EncryptIV = ConfigurationManager.AppSettings["EncryptIV"].ToString();
		string MerchantCode = ConfigurationManager.AppSettings["MerchantCode"].ToString();

		//string str = Request["msg"];
		if (Request["msg"] != null)
		{
			strPGResponse = Request["msg"].ToString();  //Reading response of PG

			if (strPGResponse != "" || strPGResponse != null)
			{
				//LBL_DisplayResult.Text = "Response :: " + strPGResponse;
				string loinparamer = String.Empty;
				string PaymentId = String.Empty;
				HPPlc.Models.dbAccessClass storeData = new HPPlc.Models.dbAccessClass();
				//SubscriptionController storeData = new SubscriptionController();

				RequestURL objRequestURL = new RequestURL();    //Creating Object of Class DotNetIntegration_1_1.RequestURL
				string strDecryptedVal = null;                  //Decrypting the PG response

				strDecryptedVal = objRequestURL.VerifyPGResponse(strPGResponse, EncryptKey, EncryptIV);

				if (strDecryptedVal.StartsWith("ERROR"))
				{
					//lblValidate.Text = strDecryptedVal;
					rtnStatus = storeData.SetResponseFromPG("Error", null);
				}
				else
				{
					strSplitDecryptedResponse = strDecryptedVal.Split('|');
					if (!String.IsNullOrEmpty(strSplitDecryptedResponse.ToString()))
					{
						strPG_TxnStatus = strSplitDecryptedResponse[0].ToString().Split('=')[1].ToString();

						if (strPG_TxnStatus == "0300" || strPG_TxnStatus == "0200")
						{
							payStatus = "Success";
						}
						else if (strPG_TxnStatus == "0396")
						{
							payStatus = "AWAITED";
						}
						else
						{
							payStatus = "Fail";
						}

						//Save in database
						rtnStatus = storeData.SetResponseFromPG(payStatus, strSplitDecryptedResponse);
					}
				}
			}
		}
	}
	catch (Exception ex)
	{
		HPPlc.Models.ApplicationError error = new HPPlc.Models.ApplicationError();
		error.PageName = "PayResponse.cshtml";
		error.MethodName = "OnLoad";
		error.ErrorMessage = ex.Message;

		HPPlc.Models.dbAccessClass.PostApplicationError(error);
	}


	@*@functions {
			async Task<HPPlc.Models.SubscriptionSuccessParam> PaymentError()
			{
				HPPlc.Models.SubscriptionSuccessParam data = new HPPlc.Models.SubscriptionSuccessParam();
				HPPlc.Models.dbAccessClass storeData = new HPPlc.Models.dbAccessClass();
				data = await storeData.SetResponseFromPG("Error", null);

				return data;
			}
		}

		@functions {
			async Task<HPPlc.Models.SubscriptionSuccessParam> PaymentDone()
			{
				HPPlc.Models.SubscriptionSuccessParam data = new HPPlc.Models.SubscriptionSuccessParam();
				HPPlc.Models.dbAccessClass storeData = new HPPlc.Models.dbAccessClass();
				data = await storeData.SetResponseFromPG(payStatus, strSplitDecryptedResponse);

				return data;
			}
		}*@

	try
	{
		<input id="payStatus" type="hidden" value="@payStatus" />
		<input id="SuccessTitle" type="hidden" value="@message.SuccessTitle" />
		<input id="SuccessMessage" type="hidden" value="@message.SuccessMessage" />
		<input id="FailedTitle" type="hidden" value="@message.FailedTitle" />
		<input id="FailedMessage" type="hidden" value="@message.FailedMessage" />
		<input id="AbortedTitle" type="hidden" value="@message.AbortedTitle" />
		<input id="AbortedMessage" type="hidden" value="@message.AbortedMessage" />
		<input id="AwaitedTitle" type="hidden" value="@message.AwaitedTitle" />
		<input id="AwaitedMessage" type="hidden" value="@message.AwaitedMessage" />
		<input id="PendingTitle" type="hidden" value="@message.PendingTitle" />
		<input id="PendingMessage" type="hidden" value="@message.PendingMessage" />
		<input id="ErrorTitle" type="hidden" value="@message.ErrorTitle" />
		<input id="ErrorMessage" type="hidden" value="@message.ErrorMessage" />
		<input id="HomeLink" type="hidden" value="@message.PopupHomeText" />
		<input id="Culture" type="hidden" value="@culture" />
	}
	catch (Exception ex)
	{
		HPPlc.Models.ApplicationError error = new HPPlc.Models.ApplicationError();
		error.PageName = "Pay Response Value Input";
		error.MethodName = "PayResponse";
		error.ErrorMessage = ex.Message;

		HPPlc.Models.dbAccessClass.PostApplicationError(error);
	}


	string IsEnableTrackerCode = ConfigurationManager.AppSettings["IsEnableTrackerCode"].ToString();
	if (rtnStatus.InvoiceData != null && IsEnableTrackerCode == "Y")
	{
		HPPlc.Models.SessionManagement.StoreInSession(HPPlc.Models.SessionType.PayResponseTracker, rtnStatus);
	}
}


@section CustomJsFiles
{
	<script src="/MyScripts/payResponse.js"></script>

	<script>
		$(document).ready(function () {
			$('#headerTag').hide(); 
			$('#footerTag').hide();
		})
	</script>
	@*@if (rtnStatus.InvoiceData != null && IsEnableTrackerCode == "Y")
		{
			<script>
			window.dataLayer = window.dataLayer || [];

			var Product = [];
			//var javascriptArray = @Html.Raw(Json.Encode(rtnStatus?.ProductList));

				window.dataLayer.push({
				event: 'e_pageView',
					ecommerce: {
						currencyCode: 'INR',// pass the currency code Exm: INR
						purchase: {
							actionField: {
								id: '@(rtnStatus?.InvoiceData?.TransactionId)',                             // Pass the Transaction ID Exm: TYU8978970J
								affiliation: 'HP Online',
								revenue: '@(rtnStatus?.TotalAmount)',                   // Pass the Revenue Exm : 899
								purchasePaymentMethod: '[PURCHASE PAYMENT METHOD]', // Pass the Payment Method Exm: Credit Card/Debit Card/UPI
								tax: '@(rtnStatus?.InvoiceData?.Tax)',                                       // Pass the Tax Value Exm: 299
								shipping: '',                            // Pass the Shipping Value as blank
								purchaseShippingMethod: 'Online', // Pass the Shipping method as Online
								coupon: '@(rtnStatus?.InvoiceData?.CouponDiscountAmt)',                                  // Pass the coupon value if any
								discountAmount: '@(rtnStatus?.InvoiceData?.Discount)'                    // Pass the discount value if any
							},
							products: @Html.Raw(Json.Encode(rtnStatus?.ProductList));
						}
					}
			});
			</script>
		}*@
}
